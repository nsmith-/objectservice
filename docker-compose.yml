version: "3.3"
services:
  db:
    build:
      context: ./db
      dockerfile: db.dockerfile
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  init-cluster:
    volumes:
      - ./restapi:/code
    env_file:
      - .env
    build:
      context: ./restapi
      dockerfile: restapi.dockerfile
    command: ./init-cluster.sh
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
  keycloak:
    build:
      context: ./keycloak
      dockerfile: keycloak.dockerfile
    ports:
      - 8080:8080
    environment:
      - KEYCLOAK_IMPORT=/root/test-realm.json
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - DB_VENDOR=postgres
      - DB_ADDR=db
      - DB_DATABASE=keycloak
      - DB_USER=keycloak
      - DB_PASSWORD=keycloak
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:8080"]
      interval: 20s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
  restapi:
    ports:
      - "8888:8888"
    volumes:
      - ./restapi:/code
    env_file:
      - .env
    build:
      context: ./restapi
      dockerfile: restapi.dockerfile
    depends_on:
      init-cluster:
        condition: service_completed_successfully
      keycloak:
        condition: service_healthy
  minio:
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - s3-data:/data
    env_file:
      - .env
    image: minio/minio
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      rabbitmq:
        condition: service_healthy
  rabbitmq:
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    image: "rabbitmq:3.12-management"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"]
      interval: 30s
      timeout: 10s
      retries: 5
volumes:
  db-data:
  s3-data:
